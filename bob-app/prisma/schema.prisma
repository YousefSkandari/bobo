// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String           @id @default(uuid())
  email          String           @unique
  username       String           @unique
  password       String
  name           String?
  avatar         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  portfolioItems PortfolioItem[]
  ownedItems     CosmeticOwned[]
  sentRequests   FriendRequest[]  @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends1       Friendship[]     @relation("UserFriends1")
  friends2       Friendship[]     @relation("UserFriends2")
  cityComponents CityComponent[]
}

// Portfolio items (stocks) owned by a user
model PortfolioItem {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  stockSymbol   String
  stockName     String
  quantity      Float
  averagePrice  Float
  currentPrice  Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cityComponent CityComponent?

  @@unique([userId, stockSymbol])
}

// Cosmetic items that can be purchased
model CosmeticItem {
  id          String         @id @default(uuid())
  name        String
  description String
  category    String         // building, decoration, theme, etc.
  price       Float
  imageUrl    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  owners      CosmeticOwned[]
}

// Link between users and owned cosmetic items
model CosmeticOwned {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  cosmeticId    String
  cosmetic      CosmeticItem @relation(fields: [cosmeticId], references: [id])
  purchasedAt   DateTime     @default(now())
  isEquipped    Boolean      @default(false)
  appliedTo     String?      // Can reference cityComponentId if applied

  @@unique([userId, cosmeticId])
}

// Friend requests between users
model FriendRequest {
  id          String    @id @default(uuid())
  senderId    String
  sender      User      @relation("SentRequests", fields: [senderId], references: [id])
  receiverId  String
  receiver    User      @relation("ReceivedRequests", fields: [receiverId], references: [id])
  status      String    @default("pending") // pending, accepted, rejected
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([senderId, receiverId])
}

// Friendship relationships (after accepted friend requests)
model Friendship {
  id        String    @id @default(uuid())
  user1Id   String
  user1     User      @relation("UserFriends1", fields: [user1Id], references: [id])
  user2Id   String
  user2     User      @relation("UserFriends2", fields: [user2Id], references: [id])
  createdAt DateTime  @default(now())

  @@unique([user1Id, user2Id])
}

// City components (visual representation of portfolio items)
model CityComponent {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  portfolioItemId String        @unique
  portfolioItem   PortfolioItem @relation(fields: [portfolioItemId], references: [id])
  type            String        // building, road, park, etc.
  size            String        // small, medium, large
  position        Json          // { x, y, z }
  rotation        Json          // { x, y, z }
  appearance      Json?         // customizable appearance properties
  performance     Float         // based on stock performance
  level           Int           @default(1)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
